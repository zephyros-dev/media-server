- name: Setup systemd container {{ application_item.key }}
  vars:
    application_name: "{{ application_item.key | regex_replace('_', '-') }}"
    volume_list: []
    volume_map: {}
  when: application_item.value.pod != None
  tags: "{{ application_item.key }}"
  block:
    - name: Setup variable for user scope {{ application_name }}
      ansible.builtin.set_fact:
        container_quadlet_path: "{{ ansible_user_dir }}/.config/containers/systemd"
        container_systemd_scope: user
      when: not application_item.value.param.become

    - name: Setup variable for system scope {{ application_name }}
      ansible.builtin.set_fact:
        container_quadlet_path: /etc/containers/systemd
        container_systemd_scope: system
      when: application_item.value.param.become

    - name: Setup systemd container {{ application_name }}
      become: "{{ application_item.value.param.become }}"
      block:
        - name: Setup podman container {{ application_name }}
          when: application_item.value.transform.state == "started"
          block:
            - name: Setup volumes {{ application_name }}
              when: application_item.value.param.volumes is defined
              block:
                - name: Get volume list for {{ application_name }}
                  # We have to use set_fact since vars make the tasks unable to be skipped
                  ansible.builtin.set_fact:
                    volume_list: "{{ application | json_query(volume_list_query) }}"
                  vars:
                    volume_list_query: "{{ application_item.key }}.transform.volumes.*"
                - name: Check if volume exists {{ application_name }}
                  when: "'/dev/' not in item or application_name == 'netdata'"
                  ansible.builtin.stat:
                    path: "{{ item }}"
                  vars:
                    volume_query: "[?type == `relativePathDir` || type == `absolutePathDir`].value"
                  loop: "{{ volume_list | json_query(volume_query) }}"
                  register: container_volume_state
                - name: Prepare volume {{ application_name }}
                  when: not container_volume_state.skipped
                  ansible.builtin.file:
                    path: "{{ item }}"
                    mode: "0755"
                    state: directory
                  loop: "{{ container_volume_state.results | json_query('[?stat.exists == `false`].item') }}"
                - name: Prepare files {{ application_name }}
                  vars:
                    volume_query: "[?type==`file`].value"
                    file_list: "{{ volume_list | json_query(volume_query) }}"
                  block:
                    - name: Prepare directory {{ application_name }}
                      ansible.builtin.file:
                        path: "{{ item | dirname }}"
                        mode: "0755"
                        state: directory
                      loop: "{{ file_list }}"
                    - name: Prepare empty file {{ application_name }}
                      ansible.builtin.copy:
                        content: ""
                        dest: "{{ item }}"
                        force: false
                        mode: "0600"
                      loop: "{{ file_list }}"

        - name: Setup container with quadlet {{ application_name }}
          block:
            - name: Check if custom setup flow exists {{ application_name }}
              delegate_to: localhost
              become: false
              ansible.builtin.stat:
                path: roles/application/tasks/service/{{ application_name }}.yaml
              register: custom_flow
            - name: Create container with custom flow {{ application_name }}
              when:
                - custom_flow.stat.exists
                - application_item.value.transform.state == "started"
                - application_item.value.param.postgres_action == "none"
              ansible.builtin.include_tasks:
                file: service/{{ application_name }}.yaml
            - name: Setup container {{ application_name }}
              when: not custom_flow.stat.exists or application_item.value.transform.state == "absent" or application_item.value.param.postgres_action != "none"
              ansible.builtin.include_tasks:
                file: container_quadlet.yaml
            - name: Setup postgres {{ application_name }}
              when: application_item.value.param.postgres_action != "none"
              ansible.builtin.include_tasks:
                file: container_postgres.yaml

            - name: Disable auth for arr container {{ application_name }}
              when:
                - "'arr' in application_name"
                - application_name != "bazarr"
                - application_item.value.transform.state == "started"
              block:
                - name: Disable authentication for {{ application_name }}
                  community.general.xml:
                    path: "{{ application_item.value.transform.volumes.config.value }}/config.xml"
                    xpath: "{{ item.key }}"
                    value: "{{ item.value }}"
                  loop:
                    - key: /Config/AuthenticationMethod
                      value: Basic
                    - key: /Config/AuthenticationRequired
                      value: DisabledForLocalAddresses
                  register: arr_config
                  retries: 60
                - name: Restart {{ application_name }} # noqa: no-handler
                  when: arr_config.changed
                  ansible.builtin.systemd:
                    name: "{{ application_name }}"
                    scope: user
                    state: restarted
